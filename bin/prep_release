#!/bin/bash

function echo_info() {
   echo -en "[\033[0;32mINFO\033[0m] "
   echo "$@"
}

function echo_error() {
   echo -en "[\033[0;31mERROR\033[0m] "
   echo "$@"
}

if [[ ! -z "$(git status --porcelain)" ]]; then
    echo_error "Repo not clean.

    Status:
$(git status --short)

    Diff:
$(git diff)"

    exit 1
fi

PROJECT=$(git remote get-url origin | sed 's/.*lambdaisland\/\([\.a-z-]\+\)\.git/\1/')
BRANCH=$(git rev-parse --abbrev-ref HEAD)

if [[ "$BRANCH" != "master" ]]; then
    echo_error "On branch $BRANCH, release must be on master."
    exit 1;
fi

git clean -xfd -e bin

VERSION="0.0-$(git rev-list --count HEAD)"

echo_info "Bumping version to $VERSION"

if [[ -d doc ]]; then
    sed 's/lambdaisland\/'"${PROJECT}"' {:mvn\/version "[^"]*"}/lambdaisland\/'"${PROJECT}"' {:mvn\/version "'${VERSION}'"}/' -i README.md doc/*.md
    sed 's/\[lambdaisland\/'"${PROJECT}"' "[^"]*"\]/\[lambdaisland\/'"${PROJECT}"' "'${VERSION}'"\]/' -i README.md doc/*.md
    ed < bin/update_toc.ed
fi

echo_inof "Updating pom.xml dependendencies"

clojure -Spom

echo_info "Updating CHANGELOG"

{
    echo "1d"
    echo "1i"
    echo "# ${VERSION} ($(date --rfc-3339=date) / $(git rev-parse --short HEAD))"
    echo "."
    echo "wq"
} | ed CHANGELOG.md

git add -A
git commit -m "Release v$VERSION"
git tag v$VERSION

git show v$VERSION
