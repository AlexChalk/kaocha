#!/usr/bin/env bash

function echo_info() {
   echo -en "[\033[0;32mINFO\033[0m] "
   echo "$@"
}

function echo_error() {
   echo -en "[\033[0;31mERROR\033[0m] "
   echo "$@"
}

PROJECT=$(git remote get-url origin | sed 's/.*lambdaisland\/\([\.a-z-]\+\)\.git/\1/')
BRANCH=$(git rev-parse --abbrev-ref HEAD)

if [[ "$BRANCH" != "master" ]]; then
    echo_error "On branch $BRANCH, release must be on master."
    exit 1;
fi

git clean -xfd -e bin

VERSION=${VERSION:-"0.0-$(git rev-list --count HEAD)"}

echo_info "Bumping version to $VERSION"

sed 's/lambdaisland\/'"${PROJECT}"' {:mvn\/version "[^"]*"}/lambdaisland\/'"${PROJECT}"' {:mvn\/version "'${VERSION}'"}/' -i README.md
sed 's/\[lambdaisland\/'"${PROJECT}"' "[^"]*"\]/\[lambdaisland\/'"${PROJECT}"' "'${VERSION}'"\]/' -i README.md

if [[ -d doc ]]; then
    sed 's/lambdaisland\/'"${PROJECT}"' {:mvn\/version "[^"]*"}/lambdaisland\/'"${PROJECT}"' {:mvn\/version "'${VERSION}'"}/' -i doc/*.md
    sed 's/\[lambdaisland\/'"${PROJECT}"' "[^"]*"\]/\[lambdaisland\/'"${PROJECT}"' "'${VERSION}'"\]/' -i doc/*.md
    ed < bin/update_toc.ed
fi

echo_info "Updating pom.xml dependendencies"

clojure -Spom
sed '/^ *$/d' -i pom.xml # https://dev.clojure.org/jira/browse/TDEPS-29

echo_info "Updating CHANGELOG"

{
    echo '1d'
    echo '1i'
    echo "# ${VERSION} ($(date --rfc-3339=date) / $(git rev-parse --short HEAD))"
    echo '.'
    echo 'wq'
} | ed CHANGELOG.md

RELEASE_NOTES=$(mktemp /tmp/${PROJECT}_${VERSION}_release_notes_XXXXXXXXXX.md)

{
    echo 'r CHANGELOG.md'
    echo '/^# /'
    echo '/^# /'
    echo '.,$d'
    echo 'wq'
} |ed $RELEASE_NOTES

git add -A
git commit -m "$(cat $RELEASE_NOTES)"
git tag v$VERSION

git show v$VERSION
